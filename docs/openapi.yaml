openapi: 3.0.1
info:
  title: REST API - Workshop CM
  description: REST API
  version: 1.0.0
servers:
  - url: http://localhost:3000
tags:
  - name: products
    description: Products Collection

  - name: clients
    description: Clients Collection

paths:
  /products:
    get:
      tags:
        - product
      summary: List products
      operationId: listProducts
      responses:
        200:
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
      x-codegen-request-body-name: body
    post:
      tags:
        - product
      summary: Add a new product
      operationId: addProduct
      requestBody:
        description: Payload of product
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
  /products/{productId}:
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
    put:
      tags:
        - product
      summary: Updates a product
      operationId: updateProduct
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/product"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/product"
    delete:
      tags:
        - product
      summary: Deletes a product
      operationId: deleteProduct
      parameters:
        - name: productId
          in: path
          description: product id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        206:
          description: Invalid ID supplied
          content: {}
        404:
          description: Product not found
          content: {}
  /products/{productName}:
    get:
      tags:
        - product
      summary: Find product by Name
      description: List of products with Name containing productName
      operationId: getproductsByName
      parameters:
        - name: productName
          in: path
          description: Name of product to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid Name supplied
          content: {}
        404:
          description: No product found
          content: {}

  /clients:
    get:
      tags:
        - client
      summary: List clients
      operationId: listClients
      responses:
        200:
          description: List of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Client"
      x-codegen-request-body-name: body

    post:
      tags:
        - client
      summary: Add a new client
      operationId: addClient
      requestBody:
        description: Payload of client
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Client"
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        400:
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body

  /clients/{clientId}:
    get:
      tags:
        - client
      summary: Find client by ID
      description: Returns a single client
      operationId: getClientById
      parameters:
        - name: clientId
          in: path
          description: ID of client to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: client not found
          content: {}
    put:
      tags:
        - client
      summary: Updates a client
      operationId: updateClient
      parameters:
        - name: clientId
          in: path
          description: ID of client that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Client"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
    delete:
      tags:
        - client
      summary: Deletes a client
      operationId: deleteClient
      parameters:
        - name: clientId
          in: path
          description: client id to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        206:
          description: Invalid ID supplied
          content: {}
        404:
          description: client not found
          content: {}

  /clients/{clientName}:
    get:
      tags:
        - client
      summary: Find client by Name
      description: List of clients with Name containing clientName
      operationId: getClientsByName
      parameters:
        - name: clientName
          in: path
          description: Name of client to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Client"
        400:
          description: Invalid name supplied
          content: {}
        404:
          description: No Client found
          content: {}
components:
  schemas:
    Product:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        Name:
          type: string
        price:
          type: number
    Client:
      required:
        - name
        - password
        - email
      type: object
      properties:
        id:
          type: string
          format: uuid
        name: type:string
        email:
          type: string
        password:
          type: string
